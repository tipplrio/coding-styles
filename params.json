{
  "name": "Tipplr React/JSX Style Guide",
  "tagline": "A mostly reasonable approach to React and JSX",
  "body": "# Tipplr React/JSX Style Guide\r\n\r\n*A mostly reasonable approach to React and JSX, forked from [Airbnb's React/JSX Style Guide](https://github.com/airbnb/javascript/tree/master/react)*\r\n\r\n\r\n## Table of Contents\r\n\r\n  1. [Basic Rules](#1-basic-rules)\r\n  2. [Class vs `React.createClass` vs stateless](#2-class-vs-reactcreateclass-vs-stateless)\r\n  3. [Naming](#3-naming)\r\n  4. [Declaration](#4-declaration)\r\n  5. [Alignment](#5-alignment)\r\n  6. [Quotes](#6-quotes)\r\n  7. [Spacing](#7-spacing)\r\n  8. [Props](#8-props)\r\n  9. [Parentheses](#9-parentheses)\r\n  10. [Tags](#10-tags)\r\n  11. [Methods](#11-methods)\r\n  12. [Ordering](#12-ordering)\r\n  13. [`isMounted`](#13-ismounted)\r\n\r\n\r\n## 1. Basic Rules\r\n\r\n  - Only include one React component per file.\r\n    - However, multiple [Stateless, or Pure, Components](https://facebook.github.io/react/docs/reusable-components.html#stateless-functions) are allowed per file. eslint: [`react/no-multi-comp`](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-multi-comp.md#ignorestateless).\r\n  - Always use JSX syntax.\r\n  - Do not use `React.createElement` unless you're initializing the app from a file that is not JSX.\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n\r\n## 2. Class vs `React.createClass` vs stateless\r\n\r\n  - If you have internal state and/or refs, prefer `class extends React.Component` over `React.createClass` unless you have a very good reason to use mixins. eslint: [`react/prefer-es6-class`](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prefer-es6-class.md) [`react/prefer-stateless-function`](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prefer-stateless-function.md)\r\n\r\n    ```jsx\r\n    // bad\r\n    const Listing = React.createClass({\r\n      // ...\r\n      render() {\r\n        return <div>{this.state.hello}</div>;\r\n      }\r\n    });\r\n\r\n    // good\r\n    class Listing extends React.Component {\r\n      // ...\r\n      render() {\r\n        return <div>{this.state.hello}</div>;\r\n      }\r\n    }\r\n    ```\r\n\r\n    And if you don't have state or refs, prefer normal functions (not arrow functions) over classes:\r\n\r\n    ```jsx\r\n    // bad\r\n    class Listing extends React.Component {\r\n      render() {\r\n        return <div>{this.props.hello}</div>;\r\n      }\r\n    }\r\n\r\n    // bad (relying on function name inference is discouraged)\r\n    const Listing = ({ hello }) => (\r\n      <div>{hello}</div>\r\n    );\r\n\r\n    // good\r\n    function Listing({ hello }) {\r\n      return <div>{hello}</div>;\r\n    }\r\n    ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n\r\n## 3. Naming\r\n\r\n  - **Extensions**: Use `.jsx` extension for React components.\r\n  - **Filename**: Use PascalCase for filenames. E.g., `ReservationCard.jsx`.\r\n  - **Reference Naming**: Use PascalCase for React components and camelCase for their instances. eslint: [`react/jsx-pascal-case`](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-pascal-case.md)\r\n\r\n    ```jsx\r\n    // bad\r\n    import reservationCard from './ReservationCard';\r\n\r\n    // good\r\n    import ReservationCard from './ReservationCard';\r\n\r\n    // bad\r\n    const ReservationItem = <ReservationCard />;\r\n\r\n    // good\r\n    const reservationItem = <ReservationCard />;\r\n    ```\r\n\r\n  - **Component Naming**: Use the filename as the component name. For example, `ReservationCard.jsx` should have a reference name of `ReservationCard`. However, for root components of a directory, use `index.jsx` as the filename and use the directory name as the component name:\r\n\r\n    ```jsx\r\n    // bad\r\n    import Footer from './Footer/Footer';\r\n\r\n    // bad\r\n    import Footer from './Footer/index';\r\n\r\n    // good\r\n    import Footer from './Footer';\r\n    ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n\r\n## 4. Declaration\r\n\r\n  - Do not use `displayName` for naming components. Instead, name the component by reference.\r\n\r\n    ```jsx\r\n    // bad\r\n    export default React.createClass({\r\n      displayName: 'ReservationCard',\r\n      // stuff goes here\r\n    });\r\n\r\n    // good\r\n    export default class ReservationCard extends React.Component {\r\n    }\r\n    ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n\r\n## 5. Alignment\r\n\r\n  - Follow these alignment styles for JSX syntax. eslint: [`react/jsx-closing-bracket-location`](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-closing-bracket-location.md)\r\n\r\n    ```jsx\r\n    // bad\r\n    <Foo superLongParam=\"bar\"\r\n         anotherSuperLongParam=\"baz\" />\r\n\r\n    // good\r\n    <Foo\r\n      superLongParam=\"bar\"\r\n      anotherSuperLongParam=\"baz\"\r\n    />\r\n\r\n    // if props fit in one line then keep it on the same line\r\n    <Foo bar=\"bar\" />\r\n\r\n    // children get indented normally\r\n    <Foo\r\n      superLongParam=\"bar\"\r\n      anotherSuperLongParam=\"baz\"\r\n    >\r\n      <Quux />\r\n    </Foo>\r\n    ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n\r\n## 6. Quotes\r\n\r\n  - Always use double quotes (`\"`) for JSX attributes, but single quotes for all other JS. eslint: [`jsx-quotes`](http://eslint.org/docs/rules/jsx-quotes)\r\n\r\n  > Why? JSX attributes [can't contain escaped quotes](http://eslint.org/docs/rules/jsx-quotes), so double quotes make conjunctions like `\"don't\"` easier to type.\r\n  > Regular HTML attributes also typically use double quotes instead of single, so JSX attributes mirror this convention.\r\n\r\n    ```jsx\r\n    // bad\r\n    <Foo bar='bar' />\r\n\r\n    // good\r\n    <Foo bar=\"bar\" />\r\n\r\n    // bad\r\n    <Foo style={{ left: \"20px\" }} />\r\n\r\n    // good\r\n    <Foo style={{ left: '20px' }} />\r\n    ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n\r\n## 7. Spacing\r\n\r\n  - Always include a single space in your self-closing tag.\r\n\r\n    ```jsx\r\n    // bad\r\n    <Foo/>\r\n\r\n    // very bad\r\n    <Foo                 />\r\n\r\n    // bad\r\n    <Foo\r\n     />\r\n\r\n    // good\r\n    <Foo />\r\n    ```\r\n\r\n  - Do not pad JSX curly braces with spaces. eslint: [`react/jsx-curly-spacing`](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-curly-spacing.md)\r\n\r\n    ```jsx\r\n    // bad\r\n    <Foo bar={ baz } />\r\n\r\n    // good\r\n    <Foo bar={baz} />\r\n    ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n\r\n## 8. Props\r\n\r\n  - Always use camelCase for prop names.\r\n\r\n    ```jsx\r\n    // bad\r\n    <Foo\r\n      UserName=\"hello\"\r\n      phone_number={12345678}\r\n    />\r\n\r\n    // good\r\n    <Foo\r\n      userName=\"hello\"\r\n      phoneNumber={12345678}\r\n    />\r\n    ```\r\n\r\n  - Omit the value of the prop when it is explicitly `true`. eslint: [`react/jsx-boolean-value`](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-boolean-value.md)\r\n\r\n    ```jsx\r\n    // bad\r\n    <Foo\r\n      hidden={true}\r\n    />\r\n\r\n    // good\r\n    <Foo\r\n      hidden\r\n    />\r\n    ```\r\n\r\n  - Always include an `alt` prop on `<img>` tags. If the image is presentational, `alt` can be an empty string or the `<img>` must have `role=\"presentation\"`. eslint: [`jsx-a11y/img-has-alt`](https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/img-has-alt.md)\r\n\r\n    ```jsx\r\n    // bad\r\n    <img src=\"hello.jpg\" />\r\n\r\n    // good\r\n    <img src=\"hello.jpg\" alt=\"Me waving hello\" />\r\n\r\n    // good\r\n    <img src=\"hello.jpg\" alt=\"\" />\r\n\r\n    // good\r\n    <img src=\"hello.jpg\" role=\"presentation\" />\r\n    ```\r\n\r\n  - Do not use words like \"image\", \"photo\", or \"picture\" in `<img>` `alt` props. eslint: [`jsx-a11y/img-redundant-alt`](https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/img-redundant-alt.md)\r\n\r\n  > Why? Screenreaders already announce `img` elements as images, so there is no need to include this information in the alt text.\r\n\r\n    ```jsx\r\n    // bad\r\n    <img src=\"hello.jpg\" alt=\"Picture of me waving hello\" />\r\n\r\n    // good\r\n    <img src=\"hello.jpg\" alt=\"Me waving hello\" />\r\n    ```\r\n\r\n  - Use only valid, non-abstract [ARIA roles](https://www.w3.org/TR/wai-aria/roles#role_definitions). eslint: [`jsx-a11y/aria-role`](https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/aria-role.md)\r\n\r\n    ```jsx\r\n    // bad - not an ARIA role\r\n    <div role=\"datepicker\" />\r\n\r\n    // bad - abstract ARIA role\r\n    <div role=\"range\" />\r\n\r\n    // good\r\n    <div role=\"button\" />\r\n    ```\r\n\r\n  - Do not use `accessKey` on elements. eslint: [`jsx-a11y/no-access-key`](https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/no-access-key.md)\r\n\r\n  > Why? Inconsistencies between keyboard shortcuts and keyboard commands used by people using screenreaders and keyboards complicate accessibility.\r\n\r\n  ```jsx\r\n  // bad\r\n  <div accessKey=\"h\" />\r\n\r\n  // good\r\n  <div />\r\n  ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n\r\n## 9. Parentheses\r\n\r\n  - Wrap JSX tags in parentheses when they span more than one line. eslint: [`react/wrap-multilines`](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/wrap-multilines.md)\r\n\r\n    ```jsx\r\n    // bad\r\n    render() {\r\n      return <MyComponent className=\"long body\" foo=\"bar\">\r\n               <MyChild />\r\n             </MyComponent>;\r\n    }\r\n\r\n    // good\r\n    render() {\r\n      return (\r\n        <MyComponent className=\"long body\" foo=\"bar\">\r\n          <MyChild />\r\n        </MyComponent>\r\n      );\r\n    }\r\n\r\n    // good, when single line\r\n    render() {\r\n      const body = <div>hello</div>;\r\n      return <MyComponent>{body}</MyComponent>;\r\n    }\r\n    ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n\r\n## 10. Tags\r\n\r\n  - Always self-close tags that have no children. eslint: [`react/self-closing-comp`](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/self-closing-comp.md)\r\n\r\n    ```jsx\r\n    // bad\r\n    <Foo className=\"stuff\"></Foo>\r\n\r\n    // good\r\n    <Foo className=\"stuff\" />\r\n    ```\r\n\r\n  - If your component has multi-line properties, close its tag on a new line. eslint: [`react/jsx-closing-bracket-location`](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-closing-bracket-location.md)\r\n\r\n    ```jsx\r\n    // bad\r\n    <Foo\r\n      bar=\"bar\"\r\n      baz=\"baz\" />\r\n\r\n    // good\r\n    <Foo\r\n      bar=\"bar\"\r\n      baz=\"baz\"\r\n    />\r\n    ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n\r\n## 11. Methods\r\n\r\n  - Use arrow functions to close over local variables.\r\n\r\n    ```jsx\r\n    function ItemList(props) {\r\n      return (\r\n        <ul>\r\n          {props.items.map((item, index) => (\r\n            <Item\r\n              key={item.key}\r\n              onClick={() => doSomethingWith(item.name, index)}\r\n            />\r\n          ))}\r\n        </ul>\r\n      );\r\n    }\r\n    ```\r\n\r\n  - Bind event handlers for the render method in the constructor. eslint: [`react/jsx-no-bind`](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-bind.md)\r\n\r\n    > Why? A bind call in the render path creates a brand new function on every single render.\r\n\r\n    ```jsx\r\n    // bad\r\n    class extends React.Component {\r\n      onClickDiv() {\r\n        // do stuff\r\n      }\r\n\r\n      render() {\r\n        return <div onClick={this.onClickDiv.bind(this)} />\r\n      }\r\n    }\r\n\r\n    // good\r\n    class extends React.Component {\r\n      constructor(props) {\r\n        super(props);\r\n\r\n        this.onClickDiv = this.onClickDiv.bind(this);\r\n      }\r\n\r\n      onClickDiv() {\r\n        // do stuff\r\n      }\r\n\r\n      render() {\r\n        return <div onClick={this.onClickDiv} />\r\n      }\r\n    }\r\n    ```\r\n\r\n  - Do not use underscore prefix for internal methods of a React component.\r\n\r\n    ```jsx\r\n    // bad\r\n    React.createClass({\r\n      _onClickSubmit() {\r\n        // do stuff\r\n      },\r\n\r\n      // other stuff\r\n    });\r\n\r\n    // good\r\n    class extends React.Component {\r\n      onClickSubmit() {\r\n        // do stuff\r\n      }\r\n\r\n      // other stuff\r\n    }\r\n    ```\r\n\r\n  - Be sure to return a value in your `render` methods. eslint: [`require-render-return`](https://github.com/yannickcr/eslint-plugin-react/pull/502)\r\n\r\n    ```jsx\r\n    // bad\r\n    render() {\r\n      (<div />);\r\n    }\r\n\r\n    // good\r\n    render() {\r\n      return (<div />);\r\n    }\r\n    ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n\r\n## 12. Ordering\r\n\r\n  - Ordering for `class extends React.Component`:\r\n\r\n  1. optional `static` methods\r\n  2. `constructor`\r\n  3. `getChildContext`\r\n  4. `componentWillMount`\r\n  5. `componentDidMount`\r\n  6. `componentWillReceiveProps`\r\n  7. `shouldComponentUpdate`\r\n  8. `componentWillUpdate`\r\n  9. `componentDidUpdate`\r\n  10. `componentWillUnmount`\r\n  11. *clickHandlers or eventHandlers* like `onClickSubmit()` or `onChangeDescription()`\r\n  12. *getter methods for `render`* like `getSelectReason()` or `getFooterContent()`\r\n  13. *Optional render methods* like `renderNavigation()` or `renderProfilePicture()`\r\n  14. `render`\r\n\r\n  - How to define `propTypes`, `defaultProps`, `contextTypes`, etc...\r\n\r\n    ```jsx\r\n    import React, { PropTypes } from 'react';\r\n\r\n    const propTypes = {\r\n      id: PropTypes.number.isRequired,\r\n      url: PropTypes.string.isRequired,\r\n      text: PropTypes.string,\r\n    };\r\n\r\n    const defaultProps = {\r\n      text: 'Hello World',\r\n    };\r\n\r\n    class Link extends React.Component {\r\n      static methodsAreOk() {\r\n        return true;\r\n      }\r\n\r\n      render() {\r\n        return <a href={this.props.url} data-id={this.props.id}>{this.props.text}</a>\r\n      }\r\n    }\r\n\r\n    Link.propTypes = propTypes;\r\n    Link.defaultProps = defaultProps;\r\n\r\n    export default Link;\r\n    ```\r\n\r\n  - Ordering for `React.createClass`: eslint: [`react/sort-comp`](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/sort-comp.md)\r\n\r\n  1. `displayName`\r\n  2. `propTypes`\r\n  3. `contextTypes`\r\n  4. `childContextTypes`\r\n  5. `mixins`\r\n  6. `statics`\r\n  7. `defaultProps`\r\n  8. `getDefaultProps`\r\n  9. `getInitialState`\r\n  10. `getChildContext`\r\n  11. `componentWillMount`\r\n  12. `componentDidMount`\r\n  13. `componentWillReceiveProps`\r\n  14. `shouldComponentUpdate`\r\n  15. `componentWillUpdate`\r\n  16. `componentDidUpdate`\r\n  17. `componentWillUnmount`\r\n  18. *clickHandlers or eventHandlers* like `onClickSubmit()` or `onChangeDescription()`\r\n  19. *getter methods for `render`* like `getSelectReason()` or `getFooterContent()`\r\n  20. *Optional render methods* like `renderNavigation()` or `renderProfilePicture()`\r\n  21. `render`\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n\r\n## 13. `isMounted`\r\n\r\n  - Do not use `isMounted`. eslint: [`react/no-is-mounted`](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-is-mounted.md)\r\n\r\n    > Why? [`isMounted` is an anti-pattern][anti-pattern], is not available when using ES6 classes, and is on its way to being officially deprecated.\r\n\r\n    [anti-pattern]: https://facebook.github.io/react/blog/2015/12/16/ismounted-antipattern.html\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n",
  "google": "UA-70766174-2",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}